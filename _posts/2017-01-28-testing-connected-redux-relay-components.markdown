---
published: true
title: "Testing Connected Redux and Relay Components"
layout: post
date: 2017-01-28 08:30
tag:
- redux
- relay
- connected
- unit
- tests
- testing
- encapsulation
- jest
- rewire
blog: true
---

The [official redux documentation](https://github.com/reactjs/redux/blob/master/docs/recipes/WritingTests.md){:target="_blank"} 
recommends exporting private react components to make it testable. This works, at the expense of encapsulation. I believe
code should be driven by design and requirements, not testing restrictions. So I set out to find a better approach.

I stumbled upon [rewire](https://github.com/jhnns/rewire){:target="_blank"} which seems to be promising. I failed to make it work
quickly though, because it does not work with es6 so a little more googling reveals [babel-plugin-rewire](https://github.com/speedskater/babel-plugin-rewire){:target="_blank"} which 
was promising.

Today I'll be talking about how to test your connected redux and relay components without sacrificing encapsulation.
 
## The problem


How do I test redux connected components or relay container wrapped components without exporting them? 

However, babelRelayPlugin.js contains a reference to schema.json which is generated by babel-node [updateSchema.js](https://github.com/relayjs/relay-starter-kit/blob/master/scripts/updateSchema.js){:target="_blank"} 
which in turn uses .babelrc which has a dependency on babelRelayPlugin which is a cyclic dependency which gives me a 
migraine.

## The solution
We need to decouple graphql schema generation from app runtime. The standard .babelrc file is required for our app runtime so that stays.
That means we cannot depend on .babelrc for our schema generation i.e. when running [updateSchema.js](https://github.com/relayjs/relay-starter-kit/blob/master/scripts/updateSchema.js){:target="_blank"}
we can't use babel-node. Instead we use plain vanilla node in combination with babel-register with inline
config when running updateSchema.

## Enough talk, show me some code
You need the following babel packages:

{% highlight javascript %}
sudo yarn add --dev babel-polyfill babel-preset-latest
sudo yarn add babel-register babel-preset-stage-0
{% endhighlight %}

In your package.json, you declare an npm run command update-schema which points an index.js file:

{% highlight javascript %}
"scripts": {
    "update-schema": "node ./src/graphql/index.js",
    ...
}
{% endhighlight %}

Your src/graphql/index.js then looks like this:

{% highlight javascript %}
require('babel-register')({
  babelrc: false,
  presets: [
    "latest"
  ]
});
require("babel-polyfill"); // required for async generators
require('./updateSchema');
{% endhighlight %}

where updateSchema.js is provided by facebook [here](https://github.com/relayjs/relay-starter-kit/blob/master/scripts/updateSchema.js){:target="_blank"}.

## Conclusion
Check out the [sample code](https://github.com/yusinto/movie-time){:target="_blank"} for a working example and let me know if this is useful (or not)!

---------------------------------------------------------------------------------------
